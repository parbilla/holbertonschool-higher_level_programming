The ``1-my_list`` module
======================

Using ``my_list``
-------------------
This is a doctest based on 1-my_list.py
Each '>>' line is run as if in a python shell, and counts as a test.
The next line, if not '>>' is the expected output of the previous line.
If anything doesn't match exactly (including trailing spaces), the test fails.

Import function:
>>> MyList = __import__('1-my_list').MyList

Test: my_list is instance of MyList
>>> my_list = MyList()
>>> isinstance(my_list, MyList)
True

Test: my_list is instance of list
>>> my_list = MyList()
>>> isinstance(my_list, list)
True

Test: my_list is instantiated (correct output)
>>> my_list = MyList([0, 5, 3, 2, 1])
>>> my_list.print_sorted()
[0, 1, 2, 3, 5]

Test: my_list is not instantiated
>>> my_list = [0, 5, 3, 2, 1]
>>> my_list.print_sorted()
Traceback (most recent call last):
...
AttributeError: 'list' object has no attribute 'print_sorted'

Test: no arguments passed
>>> my_list = MyList(None)
Traceback (most recent call last):
...
TypeError: 'NoneType' object is not iterable

Test: more than one argument
>>> my_list = MyList([1, 2], [6, 7])
Traceback (most recent call last):
...
TypeError: list() takes at most 1 argument (2 given)

Test: append elements to list
>>> my_list = MyList()
>>> my_list.append(0)
>>> my_list.append(3)
>>> my_list.append(5)
>>> my_list.append(1)
>>> my_list.append(2)
>>> print(my_list)
[0, 3, 5, 1, 2]

Test: empty list
>>> my_list = MyList()
>>> my_list.print_sorted()
[]


Test: list with ints and str
>>> my_list = MyList()
>>> my_list.append(0)
>>> my_list.append(3)
>>> my_list.append("5")
>>> my_list.append(1)
>>> my_list.print_sorted()
Traceback (most recent call last):
...
TypeError: unorderable types: str() < int()
