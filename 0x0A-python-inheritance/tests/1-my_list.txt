The ``1-my_list`` module
======================

Using ``my_list``
-------------------
This is a doctest based on 1-my_list.py
Each '>>>' line is run as if in a python shell, and counts as a test.
The next line, if not '>>>' is the expected output of the previous line.
If anything doesn't match exactly (including trailing spaces), the test fails.

Test 0: import function
>>> MyList = __import__('1-my_list').MyList

Test 1: Exists
>>> my_list  = MyList()

Test 2: my_list is instance of MyList
>>> my_list = MyList()
>>> isinstance(my_list, MyList)
True

Test 3: my_list is instance of list
>>> my_list = MyList()
>>> isinstance(my_list, list)
True

Test 4: my_list is instantiated (correct output)
>>> my_list = MyList([0, 5, 3, 2, 1])
>>> my_list.print_sorted()
[0, 1, 2, 3, 5]

Test 5: my_list is not instantiated
>>> my_list = [0, 5, 3, 2, 1]
>>> my_list.print_sorted()
Traceback (most recent call last):
...
AttributeError: 'list' object has no attribute 'print_sorted'

Test 6: no arguments passed
>>> my_list = MyList(None)
Traceback (most recent call last):
...
TypeError: 'NoneType' object is not iterable

Test 7: more than one argument
>>> my_list = MyList([1, 2], [6, 7])
Traceback (most recent call last):
...
TypeError: list() takes at most 1 argument (2 given)

Test 8: append elements to list
>>> my_list = MyList()
>>> my_list.append(0)
>>> my_list.append(3)
>>> my_list.append(5)
>>> my_list.append(1)
>>> my_list.append(2)
>>> print(my_list)
[0, 3, 5, 1, 2]

Test 9: empty list
>>> my_list = MyList()
>>> my_list.print_sorted()
[]

Test 10: list with ints and str
>>> my_list = MyList()
>>> my_list.append(0)
>>> my_list.append(3)
>>> my_list.append("5")
>>> my_list.append(1)
>>> my_list.print_sorted()
Traceback (most recent call last):
...
TypeError: unorderable types: str() < int()

Test 11: list with negative int
>>> my_list = MyList()
>>> my_list.append(0)
>>> my_list.append(3)
>>> my_list.append(-1)
>>> my_list.append(1)
>>> my_list.print_sorted()
[-1, 0, 1, 3]

Test 12: list with float
>>> my_list = MyList()
>>> my_list.append(0)
>>> my_list.append(3)
>>> my_list.append(2.5)
>>> my_list.append(1)
>>> my_list.print_sorted()
[0, 1, 2.5, 3]

Test 13: with infinity float
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)
>>> my_list.append(1e100)
>>> my_list.print_sorted()
[1, 2, 3, 4, 5, 1e+100]

Test 14: with NaN
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)
>>> my_list.append(float('NaN'))
>>> my_list.print_sorted()
[1, 2, 3, 4, 5, nan]

Test 15: with None
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)
>>> my_list.append(None)
>>> my_list.print_sorted()
Traceback (most recent call last):
    ...
TypeError: unorderable types: NoneType() < int()

Test 16: with positive ints
>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)
>>> print(my_list)
[1, 4, 2, 3, 5]
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]
>>> print(my_list)
[1, 4, 2, 3, 5]
